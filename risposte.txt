1. Cosa si intende per API REST?

Sono delle interfacce di comunicazione che consentono il trasferimento di dati tra applicazioni. 
Sono basate sulle REpresentational State Transfer, linee guida che creano e governano l'architettura dell'infrastruttura di comunicazione. 
Il loro utilizzo è diffuso nella comunicazione tra i servizi Web (web service) e le App di svariata natura, mobile, web e desktop. 
Nella maggior parte dei casi, si usa il protocollo HTTP, HiperText Transfer Protocol, un protocollo applicazione nato per le trasmissione delle pagine web, che prevede la presenza di un client, (richiedente del servizio) e di un server (fornitore del servizio). 
Il server mette a disposizione una serie di endpoints che possono essere interrogati con vari criteri di sicurezza e di livelli di accesso, tipicamente tramite l'utilizzo di tokens temporanei. 
Il client, che necessita di un servizio, fa una richiesta tramite una chiamata alle API ed il server restituisce un messaggio, che può essere in molti formati, i più utilizzati sono Xml e Json, che negli ultimi anni ha preso il sopravvento su tutti gli altri formati. 
Il Json,la notazione in cui vengono rappresentati gli oggetti nel linguaggio Javascript, è ormai utilizzato da tutti i linguaggi di programmazione ed è anche leggibile dagli uomini grazie all'utilizzo della forma chiave/valore.
 
{
    "name": "Antonio", 
    "email": "my@email.com"
} 

I punti fondamentali delle linee guida sono:
1. La presenza di un client e di un server.
2. Non esiste uno stato che gestisce una sessione di lavoro nel server, ne consegue che se si deve gestire uno stato della sessione di lavoro è compito del client.
3. L'interfaccia è uniforme per tutti i componenti, ne segue un trasferimento standardizzato e non personalizzato per ogni applicazione che ne fa richiesta.
4. Possono esistere livelli di accesso gerarchico ai dati. ex: 
    - http://domain/api/v1.0/logs può dare accesso a tutti i logs del sistema mentre 
    - http://domain/api/v1.0/users/100/logs da l'accesso ai logs del sistema solo del'utente con ID 100.  




2. Cosa si intende per servizio SOAP ?

E' un servizio che si basa sul protocollo SOAP, nato per permettere la comunicazione tra applicazioni sviluppate con linguaggi differenti.
Essendo un protocollo, deve seguire regole ben precise, che influiscono sulla complessità delle soluzioni ed il carico di gestione del sistema allungando di tempi comunicazione. 
D'altro canto garantisce degli standard di conformità come sicurezza, atomicità, coerenza ed isolamento (ACID) che lo fanno preferire per lo sviluppo di soluzioni enterprice.
Il formato utilizzato per lo scambio dei messaggi è XML. 

Esempi di servizi che implementano il protocollo SOAP sono alcuni gateway utilizzati per lo scambio delle fatture elettroniche col sistema di interscambio dell'Agenzia delle Entrate. 
I servizi Soap vengono preferiti dunque quando si vuole garantire elevata sicurezza e transazioni complesse.



3. Cos'è un database relazionale ?

Un database relazionale è la raccolta di un insieme di dati che sono legati tra loro per mezzo di relazioni predefinite. 
I dati, che possono essere classificati in entità e relazioni tra di esse, vengono conservati nelle tabelle del DB. Questa tecnica è detta normalizzazione.
Le tabelle sono formate da righe, che rappresentano i records, da colonne, che rappresentano gli attributi o campi di ogni record. 
I campi possono essere di vari tipi da numerici a testuali da binari ad enumerati, ecc...
Un insieme di campi è definito chiave primaria quando identifica univocamente un record della tabella. 
I records di una tabella possono essere relazionati ai records di un altra tabella, questo avviene tramite l'utilizzo delle chiavi esterne, 
che servono per congiungere le tabelle quando vengono eseguite le interrogazioni per la consultazione dei dati del DB.
Le relazioni possono essere :
    - uno a uno, quando un record di una tabella è relazionato con un solo record di un'altra tabella.
    - uno a molti, quando un record di una tabella è relazionato con più record di un'altra tabella.
    - molti a molti quando più record di una tabella sono relazionati con più record di un'altra tabella.

Per manipolare i dati del DB si utilizza un linguaggio denominato SQL. 
I comandi del database possono essere di vari tipi:

    Interrogazione - restituiscono dati in base ai criteri di selezione e di richiesta. 
        
        SELECT campo1, campo2 FROM tabella WHERE campo3 = valore;

    è anche possibile combinare i dati di più tabella usando le istruzioni di JOIN che collegano le tabelle tramite le chiavi esterne e primarie. 

        SELECT tabella1.campo1, tabella1.campo2, tabella2.campo2
        FROM tabella1
        JOIN tabella2 ON  tabella1.compo3 = tabella2.campo1   
        WHERE tabella1.campo3 = valore;
    

    Inserimento - inseriscono nuovi record nelle tabelle del DB
        
        INSERT INTO tabella (campo1,campo2) VALUES (valore1,valore2);

    Modifica - variano i dati che rispettano date condizioni
        
        UPDATE tabella SET campo1 = valore1, campo2 = valore2 WHERE campo3 = valore;

    Cancellazione - eliminano in modo permanente i records dal db
        
        DELETE FROM tabella WHERE campo1 = valore;      

Oltre a questi abbiamo altri comandi per la gestione della struttura del DB:
    
    CREATE TABLE, ALTER TABLE, DROP, TRUNCATE.   

I dati vengono gestiti tramite DBMS, un software che il compito di gestione dei dati. 
IL DBMS garantisce uno standard ACID tramite l'utilizzo delle transazioni, 
cioè una sequenza di operazioni atomiche che possono concludersi con un evento di successo detto COMMIT o di insuccesso ROLLBACK 

Tra i DBMS più conosciuti ricordiamo: Oracle, Mysql, MariaDB, PostgreSQL    

E' possibile collegare il DBMS a tutti i linguaggi di programmazione moderni attraverso 
opportuni driver cosi da eseguire le queries dal linguaggio di programmazione e manipolarne i dati per avere i risultati direttamente in memoria.



4. Cos'è un database NoSQL ?

I DB noSQL non utilizzano le tabelle per memorizzare i dati. 
Possono essere distinti in varie tipologie in base al proprio modello di dati. 
I tipi più importanti sono i documenti (MongoDB), chiave/valore (Redis), wide-columns (Cassandra) e i grafici.
 
I DB noSQL sono pensati per applicazioni che necessitano di grandi volumi di dati e 
garantiscono flessibilità dello schema di rappresentazione del dato e una bassa latenza, 
minimizzando o spesso eliminando i classici criteri di coerenza di dati che offrono i DB relazionali, ad esempio le join e le transazioni.      

Un database noSql molto utilizzato è MongoDB, un db documentale. 
I documenti che hanno la forma di oggetti JSON vengono memorizzati in contenitori chiamati collections.
Ciascun documento contiene una serie di coppie campo/valore. I valori sono di vari tipi ad esempio stringhe, numeri, booleani, array o oggetti, ecc. 
Questo permettere agli sviluppatori di allineare e sincronizzare i documenti del db con gli oggetti del linguaggio di programmazione, 
cosi da mantenere persistente la base di dati durante l'esecuzione del programma.   

Le sue caratteristiche gli permettono alte performance e di essere altamente scalabile orizzontalmente 
(aggiunta di server e non la sostituzione con un altro + grande).
 
La scalabilità consente la distribuzione su più servers acquisendo i seguenti vantaggi: 
- gestione di grandi volumi di dati.
- risposta reattiva ai fail-hover, se una macchina smette di funzionare si possono dirottare i dati su di un altra attiva
- alta disponibilità  
- disaster recovery

Per ottenere la performance e scalabilità si è dovuto rinunciare a funzioni fondamentali dei db Realzionali: le Join e le transazioni.

Per ovviare alla mancanza delle JOIN si è introdotto il concetto di Pre-Join(incapsulazione) detto anche "denormalizzazione" in questo modo i dati vengono salvati già uniti. 
Ogni entità deve contenere anche tutte le informazioni derivanti dalle tabelle secondarie del DB.

{
    "_id" : 1,
    "name" : "Antonio",
    "work" : {
        "name" :"Developer"
        "qualification" : "full stack"
    }
    "cars" : [
        {
            "brand" : "Nissan",
            "name" : "Juke"
        },{
            "brand" : "Citroen",
            "name" : "C1",
            "year" : 2010  
        }
    ]
}




5. Cos'è un ORM ? Fai almeno un esempio.

E' l'acronimo di Object-Relational Mapping, è una tecnica di programmazione utilizzata per la gestione dati di un database relazionale all’interno di programmi sviluppati con linguaggi di programmazione orientata agli oggetti. 
Cosi da mantenere una sincronizzazione persistente tra i dati presenti in memoria durante l'esecuzione di un programma e la base di dati. 
E' possibile gestire operazioni di interrogazione, creazione, aggiornamento, cancellazione dei records e migrazione della struttura dati, agendo sugli oggetti (Models) che mappano virtualmente le tabelle del db, in modo da avere le stesse operazioni riportate sulla base di dati in modo persistente.

I vantaggi introdotti da questa tecnica sono: 
    - manipolare i dati come se fossero oggetti 
    - creazione di codici più leggibili e corti
    - la presenza di un queries builder, cioè uno strumento che permette la scrittura delle queries in modo ottimizzato e sicuro prevedendo l'SQL injection, 
        applicando gli opportuni escape e filtraggi ai dati in input.
    - la portabilità dell'applicazione, infatti gli ORM rendono il programma indipendente dal db, creando un'interfaccia tra i due, permettendo così la sostituzione del db stesso. 

Gli svantaggi:
    - curva di apprendimento lenta (si devono conoscere le API dell'implementazione dell'ORM per poterlo utilizzare, non basta solo conoscere la sintassi SQL) 
    - complessità nell'utilizzo 
    - non tutte le queries possono essere effettuate con questa tecnica, per questo molti ORM danno la possibilità di eseguire direttamente le queries da codice SQL. 

Un esempio di implementazione di un ORM è Sequelizze utilizzato nell'ambiente NodeJs.

    - Si crea un modello che ha il compito di mappare una tabella del db:

        class EducationLevels extends Model {};

        EducationLevels.init({
	        id: {
		        type: DataTypes.BIGINT,
		        autoIncrement: true,
		        primaryKey: true,
		        allowNull: false
	        },

	        name: DataTypes.STRING

        }, {
	        sequelize,
	        timestamps: false,

	        modelName: 'EducationLevels',
	        tableName : 'education_levels'
        });    

    - si possono eseguire le operazioni tramite i metodi dell'oggetto:
     
            
        EducationLevels.findAll(); // Interrogazione

        EducationLevels.create({ // Inserimento di un record
            name : 'Doctor'
        });


        EducationLevels.update({ name: "Prof" }, {  //Modifica di un record
          where: {
            id: 5
          }
        });


        EducationLevels.destroy({ //cancellazione di un record
          where: {
            id : 5
          }
        });




6. Cos'è la SQL Injection

E' una tecnica di code injection (inserimento di codice malevolo), consiste nell'attaccare applicazioni di gestione dati, attraverso l’inserimento e la conseguente esecuzione di stringhe di codice SQL estranee.

Per esempio la classica query che si esegue per identificare ed autenticare un utente dentro un sistema è:

    SELECT * 
    FROM users 
    WHERE username = 'my-username' AND password = 'my-password'

questa query ritorna i campi della tabella users a condizione che i campi username e password coincidono con quelli dati in input. 

Immaginiamo ora di processare la query col seguente input:

    {
        username : "%' limit 1; #",
        password : "pass"
    }

la query si trasformerebbe in : 

    SELECT * 
    FROM users 
    WHERE username = '%' limit 1; #' AND password = 'pass'

che è diversa da come l'aveva pensata il programmatore: 

questa query ritorna i campi del primo record della tabella users, violando l'accesso al sistema.

Per ovviare a questo attacco si devono sempre filtrare i dati in input e fare gli opportuni escape mentre si costruisce la query da eseguire.

    SELECT * 
    FROM users 
    WHERE username = '%\' limit 1; #' AND password = 'pass'

in questo modo l'attacco fallirebbe perchè abbiamo rispettato la logica di come era stata pensata la query.




7. Cos'è l'autenticazione a 2 fattori? Descrivi brevemente un esempio.

E' un metodo di autenticazione sicura per sistemi e piattaforme informatiche, consiste nell’utilizzo di due metodi invece che uno, 
ad esempio l’inserimento di una password e la scansione dell’impronta digitale.

Per accedere a un sistema protetto, l’utente deve eseguire due operazioni:

    - identificazione (tramite username)
    - autenticazione (tramite password)

l'autenticazione a 2 fattori prevede due tipi di autenticazione di origine diversa,scelti tra:

    - Una cosa che sai, password
    - Una cosa che hai, smartcard, dispositivo mirato a tal scopo, app sullo smartphone  
    - Una cosa che sei, impronta digitale o altro dato biometrico

Il sistema di autenticazione a 2 fattori è utilizzato ad esempio nelle app di web banking.
Una volta eseguito l'accesso nella propria area personale, per effettuare delle operazioni tipo bonifico si deve:

    1. inserire un pin (una cosa che sai)
    2. utilizzare un token - dispositivo che dimostri la tua identità, (una cosa che hai)

    
    


8. Descrivi brevemente un metodo sicuro per salvare le password degli utenti sul DB.

Si possono usare le funzioni hash, che convertono input di lunghezza arbitraria in una stringa binaria di lunghezza fissa (digest) 
che viene determinata dal tipo di algoritmo utilizzato per la conversione. 
Queste funzioni sono invertibili quindi non è possibile risalire all'input partendo dall'output.

Caratteristiche che le rendono ideale sono: 
    
    - identificano univocamente la password (due password che differiscono di 1 solo carattere hanno valore hash completamente diversi)
    - l'algoritmo è deterministico - ad un input corrisponde sempre lo stesso output

esempi di funzioni hash utilizzati per il salvataggio dei dati sono md5 ormai poco usata per via della sua scarsa sicurezza e 
sha1 che è un buon compromesso tra sicurezza e complessità di esecuzione.

Esempio di controllo è il seguente

    sha1(password_in_input) == sha1(password_salvata_sul_db).




9. Cos'è una Sticky Session in un sistema con Load Balancing?

I classici load balancer hanno il compito di instradare ogni richiesta su un server o un istanza virtuale registrata con il minor carico, rendendo il sistema equilibrato.

Una sticky session letteralmente incolla una sessione utente ad un server specifico, creando un'associazione tra di essi in modo persistente.
Quindi durante tutta la sessione, le richieste dell'utente, verranno inviate alla stesso server. 

Questa soluzione permette performance migliori dovute al fatto che non si devono scambiare le informazioni delle sessioni ad ogni richiesta, 
inoltre si possono sfruttare meccanismi di cache per velocizzare le risposte. 
Di contro rendono più difficile il bilanciamento del carico provocando sovraccarichi dei server.

Possono essere gestiti tramite dei cookies che indicano un intervallo di tempo di durata dell'associazione. 
In fase di richiesta il LB controlla se il tempo indicato è valido ed instrada costantemente la richiesta allo stesso server.
A tempo scaduto si perde l'associazione persistente.

Questi cookies possono essere gestiti sia dall'applicazione che fa la richiesta, sia dal LB.

      














 



    





  
  
